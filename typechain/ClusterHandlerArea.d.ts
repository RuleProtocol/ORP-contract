/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ClusterHandlerAreaInterface extends ethers.utils.Interface {
  functions: {
    "add(string,string,address)": FunctionFragment;
    "cname()": FunctionFragment;
    "deployerHandlerMap(address,uint256)": FunctionFragment;
    "deployerTransfer(address,address)": FunctionFragment;
    "get(address)": FunctionFragment;
    "handlerList(uint256)": FunctionFragment;
    "handlerMap(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAvailable(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateState(address,uint8)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployerHandlerMap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployerTransfer",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [string]): string;
  encodeFunctionData(
    functionFragment: "handlerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "handlerMap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAvailable", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployerHandlerMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handlerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handlerMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DeployerTransfer(address,address)": EventFragment;
    "EventHandler(address,address,uint8,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployerTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DeployerTransferEvent = TypedEvent<
  [string, string] & { deployer: string; newDeployer: string }
>;

export type EventHandlerEvent = TypedEvent<
  [string, string, number, number] & {
    handler: string;
    deployer: string;
    state: number;
    newState: number;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ClusterHandlerArea extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClusterHandlerAreaInterface;

  functions: {
    add(
      name: string,
      description: string,
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cname(overrides?: CallOverrides): Promise<[string]>;

    deployerHandlerMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployerTransfer(
      handler: string,
      newDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      handler: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [number, string, string, string, string, number, BigNumber] & {
          id: number;
          name: string;
          description: string;
          handler: string;
          deployer: string;
          state: number;
          callCount: BigNumber;
        }
      ]
    >;

    handlerList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handlerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string, string, number, BigNumber] & {
        id: number;
        name: string;
        description: string;
        handler: string;
        deployer: string;
        state: number;
        callCount: BigNumber;
      }
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAvailable(
      handler: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exist: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateState(
      handler: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  add(
    name: string,
    description: string,
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cname(overrides?: CallOverrides): Promise<string>;

  deployerHandlerMap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployerTransfer(
    handler: string,
    newDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(
    handler: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      [number, string, string, string, string, number, BigNumber] & {
        id: number;
        name: string;
        description: string;
        handler: string;
        deployer: string;
        state: number;
        callCount: BigNumber;
      }
    ]
  >;

  handlerList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  handlerMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, string, number, BigNumber] & {
      id: number;
      name: string;
      description: string;
      handler: string;
      deployer: string;
      state: number;
      callCount: BigNumber;
    }
  >;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAvailable(handler: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateState(
    handler: string,
    state: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    add(
      name: string,
      description: string,
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cname(overrides?: CallOverrides): Promise<string>;

    deployerHandlerMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployerTransfer(
      handler: string,
      newDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    get(
      handler: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [number, string, string, string, string, number, BigNumber] & {
          id: number;
          name: string;
          description: string;
          handler: string;
          deployer: string;
          state: number;
          callCount: BigNumber;
        }
      ]
    >;

    handlerList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    handlerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string, string, number, BigNumber] & {
        id: number;
        name: string;
        description: string;
        handler: string;
        deployer: string;
        state: number;
        callCount: BigNumber;
      }
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAvailable(handler: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      handler: string,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DeployerTransfer(address,address)"(
      deployer?: string | null,
      newDeployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { deployer: string; newDeployer: string }
    >;

    DeployerTransfer(
      deployer?: string | null,
      newDeployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { deployer: string; newDeployer: string }
    >;

    "EventHandler(address,address,uint8,uint8)"(
      handler?: string | null,
      deployer?: null,
      state?: BigNumberish | null,
      newState?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, number, number],
      { handler: string; deployer: string; state: number; newState: number }
    >;

    EventHandler(
      handler?: string | null,
      deployer?: null,
      state?: BigNumberish | null,
      newState?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, number, number],
      { handler: string; deployer: string; state: number; newState: number }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    add(
      name: string,
      description: string,
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<BigNumber>;

    deployerHandlerMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployerTransfer(
      handler: string,
      newDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    handlerList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlerMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAvailable(handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateState(
      handler: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      name: string,
      description: string,
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployerHandlerMap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployerTransfer(
      handler: string,
      newDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlerList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAvailable(
      handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      handler: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
