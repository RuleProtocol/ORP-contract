/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ClusterMountingAreaInterface extends ethers.utils.Interface {
  functions: {
    "checkTokenMountingExist(uint32,address,uint256,address,uint256)": FunctionFragment;
    "cname()": FunctionFragment;
    "getTokenMountingList(uint32,address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "mountToken(address,uint32,uint8,address,uint256,(uint8,address,uint256,uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenMountingExist(bytes32)": FunctionFragment;
    "tokenMountingList(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unmountToken(address,uint32,uint8,address,uint256,(uint8,address,uint256,uint256))": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkTokenMountingExist",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenMountingList",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mountToken",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMountingExist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMountingList",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unmountToken",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "checkTokenMountingExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMountingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mountToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMountingExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMountingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unmountToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ClusterMountingArea extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClusterMountingAreaInterface;

  functions: {
    checkTokenMountingExist(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMountingAddress: string,
      tokenMountingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cname(overrides?: CallOverrides): Promise<[string]>;

    getTokenMountingList(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
        })[]
      ]
    >;

    initialize(
      clusterArea_: string,
      poolContract_: string,
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMountingExist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenMountingList(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unmountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkTokenMountingExist(
    clusterId: BigNumberish,
    token: string,
    tokenId: BigNumberish,
    tokenMountingAddress: string,
    tokenMountingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cname(overrides?: CallOverrides): Promise<string>;

  getTokenMountingList(
    clusterId: BigNumberish,
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([number, string, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
    })[]
  >;

  initialize(
    clusterArea_: string,
    poolContract_: string,
    engine_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mountToken(
    caller: string,
    clusterId: BigNumberish,
    erc: BigNumberish,
    token: string,
    tokenId: BigNumberish,
    tokenMounting: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMountingExist(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenMountingList(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unmountToken(
    caller: string,
    clusterId: BigNumberish,
    erc: BigNumberish,
    token: string,
    tokenId: BigNumberish,
    tokenMounting: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkTokenMountingExist(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMountingAddress: string,
      tokenMountingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cname(overrides?: CallOverrides): Promise<string>;

    getTokenMountingList(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([number, string, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
      })[]
    >;

    initialize(
      clusterArea_: string,
      poolContract_: string,
      engine_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenMountingExist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenMountingList(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unmountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    checkTokenMountingExist(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMountingAddress: string,
      tokenMountingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMountingList(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      clusterArea_: string,
      poolContract_: string,
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMountingExist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMountingList(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unmountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkTokenMountingExist(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMountingAddress: string,
      tokenMountingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenMountingList(
      clusterId: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      clusterArea_: string,
      poolContract_: string,
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMountingExist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMountingList(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unmountToken(
      caller: string,
      clusterId: BigNumberish,
      erc: BigNumberish,
      token: string,
      tokenId: BigNumberish,
      tokenMounting: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
