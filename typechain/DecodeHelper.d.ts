/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DecodeHelperInterface extends ethers.utils.Interface {
  functions: {
    "bytesToString(bytes)": FunctionFragment;
    "customDestructure(bytes)": FunctionFragment;
    "customNestedDestructure(bytes)": FunctionFragment;
    "customNestedDestructureKeccak(bytes)": FunctionFragment;
    "customNestedToRlpBytes(bytes)": FunctionFragment;
    "isList(bytes)": FunctionFragment;
    "itemLength(bytes)": FunctionFragment;
    "nestedIteration(bytes)": FunctionFragment;
    "numItems(bytes)": FunctionFragment;
    "payloadKeccak256(bytes)": FunctionFragment;
    "payloadLocation(bytes)": FunctionFragment;
    "rlpBytesKeccak256(bytes)": FunctionFragment;
    "rlpLen(bytes)": FunctionFragment;
    "toAddress(bytes)": FunctionFragment;
    "toBlockHeader(bytes)": FunctionFragment;
    "toBoolean(bytes)": FunctionFragment;
    "toBytes(bytes)": FunctionFragment;
    "toIterator(bytes)": FunctionFragment;
    "toRlpBytes(bytes)": FunctionFragment;
    "toUint(bytes)": FunctionFragment;
    "toUintStrict(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bytesToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customDestructure",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customNestedDestructure",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customNestedDestructureKeccak",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customNestedToRlpBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isList", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "itemLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nestedIteration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "numItems", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payloadKeccak256",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payloadLocation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rlpBytesKeccak256",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rlpLen", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "toAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toBlockHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toBoolean",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "toIterator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toRlpBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "toUint", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "toUintStrict",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bytesToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customDestructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customNestedDestructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customNestedDestructureKeccak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customNestedToRlpBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nestedIteration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payloadKeccak256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payloadLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rlpBytesKeccak256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rlpLen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toBoolean", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toIterator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toRlpBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUintStrict",
    data: BytesLike
  ): Result;

  events: {};
}

export class DecodeHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DecodeHelperInterface;

  functions: {
    bytesToString(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    customDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber]>;

    customNestedDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    customNestedDestructureKeccak(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    customNestedToRlpBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isList(item: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    itemLength(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nestedIteration(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    numItems(item: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    payloadKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    payloadLocation(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        payloadMemPtr: BigNumber;
        payloadLen: BigNumber;
        itemMemPtr: BigNumber;
      }
    >;

    rlpBytesKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rlpLen(item: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    toAddress(item: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    toBlockHeader(
      rlpHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentHash: string;
        sha3Uncles: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        difficulty: BigNumber;
        number: BigNumber;
        gasLimit: BigNumber;
        gasUsed: BigNumber;
        timestamp: BigNumber;
        nonce: BigNumber;
      }
    >;

    toBoolean(item: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    toBytes(item: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    toIterator(item: BytesLike, overrides?: CallOverrides): Promise<[void]>;

    toRlpBytes(item: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    toUint(item: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    toUintStrict(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bytesToString(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  customDestructure(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean, BigNumber]>;

  customNestedDestructure(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  customNestedDestructureKeccak(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  customNestedToRlpBytes(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isList(item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  itemLength(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  nestedIteration(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  numItems(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  payloadKeccak256(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  payloadLocation(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      payloadMemPtr: BigNumber;
      payloadLen: BigNumber;
      itemMemPtr: BigNumber;
    }
  >;

  rlpBytesKeccak256(
    item: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  rlpLen(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  toAddress(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  toBlockHeader(
    rlpHeader: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      parentHash: string;
      sha3Uncles: string;
      stateRoot: string;
      transactionsRoot: string;
      receiptsRoot: string;
      difficulty: BigNumber;
      number: BigNumber;
      gasLimit: BigNumber;
      gasUsed: BigNumber;
      timestamp: BigNumber;
      nonce: BigNumber;
    }
  >;

  toBoolean(item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  toBytes(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  toIterator(item: BytesLike, overrides?: CallOverrides): Promise<void>;

  toRlpBytes(item: BytesLike, overrides?: CallOverrides): Promise<string>;

  toUint(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  toUintStrict(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bytesToString(item: BytesLike, overrides?: CallOverrides): Promise<string>;

    customDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber]>;

    customNestedDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    customNestedDestructureKeccak(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    customNestedToRlpBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isList(item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    itemLength(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    nestedIteration(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    numItems(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    payloadKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    payloadLocation(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        payloadMemPtr: BigNumber;
        payloadLen: BigNumber;
        itemMemPtr: BigNumber;
      }
    >;

    rlpBytesKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    rlpLen(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toAddress(item: BytesLike, overrides?: CallOverrides): Promise<string>;

    toBlockHeader(
      rlpHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentHash: string;
        sha3Uncles: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        difficulty: BigNumber;
        number: BigNumber;
        gasLimit: BigNumber;
        gasUsed: BigNumber;
        timestamp: BigNumber;
        nonce: BigNumber;
      }
    >;

    toBoolean(item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    toBytes(item: BytesLike, overrides?: CallOverrides): Promise<string>;

    toIterator(item: BytesLike, overrides?: CallOverrides): Promise<void>;

    toRlpBytes(item: BytesLike, overrides?: CallOverrides): Promise<string>;

    toUint(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toUintStrict(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bytesToString(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customNestedDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customNestedDestructureKeccak(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customNestedToRlpBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isList(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    itemLength(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    nestedIteration(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numItems(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    payloadKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payloadLocation(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rlpBytesKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rlpLen(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toAddress(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toBlockHeader(
      rlpHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBoolean(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toBytes(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toIterator(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toRlpBytes(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toUint(item: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    toUintStrict(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytesToString(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customNestedDestructure(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customNestedDestructureKeccak(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customNestedToRlpBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isList(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemLength(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nestedIteration(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numItems(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payloadKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payloadLocation(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rlpBytesKeccak256(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rlpLen(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAddress(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBlockHeader(
      rlpHeader: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBoolean(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toIterator(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toRlpBytes(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUintStrict(
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
