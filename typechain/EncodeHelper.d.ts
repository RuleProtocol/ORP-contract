/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EncodeHelperInterface extends ethers.utils.Interface {
  functions: {
    "encodeAddress(address)": FunctionFragment;
    "encodeBool(bool)": FunctionFragment;
    "encodeBytes(bytes)": FunctionFragment;
    "encodeInt(int256)": FunctionFragment;
    "encodeList(bytes[])": FunctionFragment;
    "encodeString(string)": FunctionFragment;
    "encodeUint(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "encodeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "encodeBool", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "encodeBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeInt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeList",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeUint",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeBool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeInt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeUint", data: BytesLike): Result;

  events: {};
}

export class EncodeHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EncodeHelperInterface;

  functions: {
    encodeAddress(self: string, overrides?: CallOverrides): Promise<[string]>;

    encodeBool(self: boolean, overrides?: CallOverrides): Promise<[string]>;

    encodeBytes(self: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    encodeInt(self: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    encodeList(self: BytesLike[], overrides?: CallOverrides): Promise<[string]>;

    encodeString(self: string, overrides?: CallOverrides): Promise<[string]>;

    encodeUint(
      self: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  encodeAddress(self: string, overrides?: CallOverrides): Promise<string>;

  encodeBool(self: boolean, overrides?: CallOverrides): Promise<string>;

  encodeBytes(self: BytesLike, overrides?: CallOverrides): Promise<string>;

  encodeInt(self: BigNumberish, overrides?: CallOverrides): Promise<string>;

  encodeList(self: BytesLike[], overrides?: CallOverrides): Promise<string>;

  encodeString(self: string, overrides?: CallOverrides): Promise<string>;

  encodeUint(self: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    encodeAddress(self: string, overrides?: CallOverrides): Promise<string>;

    encodeBool(self: boolean, overrides?: CallOverrides): Promise<string>;

    encodeBytes(self: BytesLike, overrides?: CallOverrides): Promise<string>;

    encodeInt(self: BigNumberish, overrides?: CallOverrides): Promise<string>;

    encodeList(self: BytesLike[], overrides?: CallOverrides): Promise<string>;

    encodeString(self: string, overrides?: CallOverrides): Promise<string>;

    encodeUint(self: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    encodeAddress(self: string, overrides?: CallOverrides): Promise<BigNumber>;

    encodeBool(self: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    encodeBytes(self: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    encodeInt(
      self: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeList(
      self: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeString(self: string, overrides?: CallOverrides): Promise<BigNumber>;

    encodeUint(
      self: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeAddress(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBool(
      self: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBytes(
      self: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeInt(
      self: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeList(
      self: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeString(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeUint(
      self: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
