/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IClusterAttributeAreaInterface extends ethers.utils.Interface {
  functions: {
    "cname()": FunctionFragment;
    "getAttrState(bytes32)": FunctionFragment;
    "getClusterAttrIdList(uint32,address)": FunctionFragment;
    "getClusterAttrList(uint32,address,uint32[])": FunctionFragment;
    "getClusterAttrStateList(uint32,address,uint32[])": FunctionFragment;
    "setClusterAttrStateList(uint32,address,uint32[],uint8[])": FunctionFragment;
    "updateClusterAttrList(address,uint32,address,tuple[],uint8[])": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAttrState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClusterAttrIdList",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClusterAttrList",
    values: [BigNumberish, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClusterAttrStateList",
    values: [BigNumberish, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setClusterAttrStateList",
    values: [BigNumberish, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClusterAttrList",
    values: [
      string,
      BigNumberish,
      string,
      {
        attrId: BigNumberish;
        name: string;
        symbol: string;
        uri: string;
        level: BigNumberish;
      }[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttrState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClusterAttrIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClusterAttrList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClusterAttrStateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClusterAttrStateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClusterAttrList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "SetClusterAttr(uint32,uint32)": EventFragment;
    "SetClusterAttrState(uint32,uint32,uint8,uint8)": EventFragment;
    "SetTokenAttr(address,uint32)": EventFragment;
    "SetTokenAttrState(address,uint32,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetClusterAttr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClusterAttrState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenAttr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenAttrState"): EventFragment;
}

export type SetClusterAttrEvent = TypedEvent<
  [number, number] & { clusterId: number; attrId: number }
>;

export type SetClusterAttrStateEvent = TypedEvent<
  [number, number, number, number] & {
    clusterId: number;
    attrId: number;
    state: number;
    newState: number;
  }
>;

export type SetTokenAttrEvent = TypedEvent<
  [string, number] & { token: string; attrId: number }
>;

export type SetTokenAttrStateEvent = TypedEvent<
  [string, number, number, number] & {
    token: string;
    attrId: number;
    state: number;
    newState: number;
  }
>;

export class IClusterAttributeArea extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IClusterAttributeAreaInterface;

  functions: {
    cname(overrides?: CallOverrides): Promise<[string]>;

    getAttrState(hash: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    getClusterAttrIdList(
      clusterId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getClusterAttrList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, string, string, number] & {
          attrId: number;
          name: string;
          symbol: string;
          uri: string;
          level: number;
        })[]
      ]
    >;

    getClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    setClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      stateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateClusterAttrList(
      caller: string,
      clusterId: BigNumberish,
      token: string,
      attrList: {
        attrId: BigNumberish;
        name: string;
        symbol: string;
        uri: string;
        level: BigNumberish;
      }[],
      attrStateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cname(overrides?: CallOverrides): Promise<string>;

  getAttrState(hash: BytesLike, overrides?: CallOverrides): Promise<number>;

  getClusterAttrIdList(
    clusterId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getClusterAttrList(
    clusterId: BigNumberish,
    token: string,
    attrIdList: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([number, string, string, string, number] & {
      attrId: number;
      name: string;
      symbol: string;
      uri: string;
      level: number;
    })[]
  >;

  getClusterAttrStateList(
    clusterId: BigNumberish,
    token: string,
    attrIdList: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<number[]>;

  setClusterAttrStateList(
    clusterId: BigNumberish,
    token: string,
    attrIdList: BigNumberish[],
    stateList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateClusterAttrList(
    caller: string,
    clusterId: BigNumberish,
    token: string,
    attrList: {
      attrId: BigNumberish;
      name: string;
      symbol: string;
      uri: string;
      level: BigNumberish;
    }[],
    attrStateList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cname(overrides?: CallOverrides): Promise<string>;

    getAttrState(hash: BytesLike, overrides?: CallOverrides): Promise<number>;

    getClusterAttrIdList(
      clusterId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getClusterAttrList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([number, string, string, string, number] & {
        attrId: number;
        name: string;
        symbol: string;
        uri: string;
        level: number;
      })[]
    >;

    getClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<number[]>;

    setClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      stateList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateClusterAttrList(
      caller: string,
      clusterId: BigNumberish,
      token: string,
      attrList: {
        attrId: BigNumberish;
        name: string;
        symbol: string;
        uri: string;
        level: BigNumberish;
      }[],
      attrStateList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "SetClusterAttr(uint32,uint32)"(
      clusterId?: null,
      attrId?: null
    ): TypedEventFilter<
      [number, number],
      { clusterId: number; attrId: number }
    >;

    SetClusterAttr(
      clusterId?: null,
      attrId?: null
    ): TypedEventFilter<
      [number, number],
      { clusterId: number; attrId: number }
    >;

    "SetClusterAttrState(uint32,uint32,uint8,uint8)"(
      clusterId?: null,
      attrId?: null,
      state?: null,
      newState?: null
    ): TypedEventFilter<
      [number, number, number, number],
      { clusterId: number; attrId: number; state: number; newState: number }
    >;

    SetClusterAttrState(
      clusterId?: null,
      attrId?: null,
      state?: null,
      newState?: null
    ): TypedEventFilter<
      [number, number, number, number],
      { clusterId: number; attrId: number; state: number; newState: number }
    >;

    "SetTokenAttr(address,uint32)"(
      token?: null,
      attrId?: null
    ): TypedEventFilter<[string, number], { token: string; attrId: number }>;

    SetTokenAttr(
      token?: null,
      attrId?: null
    ): TypedEventFilter<[string, number], { token: string; attrId: number }>;

    "SetTokenAttrState(address,uint32,uint8,uint8)"(
      token?: null,
      attrId?: null,
      state?: null,
      newState?: null
    ): TypedEventFilter<
      [string, number, number, number],
      { token: string; attrId: number; state: number; newState: number }
    >;

    SetTokenAttrState(
      token?: null,
      attrId?: null,
      state?: null,
      newState?: null
    ): TypedEventFilter<
      [string, number, number, number],
      { token: string; attrId: number; state: number; newState: number }
    >;
  };

  estimateGas: {
    cname(overrides?: CallOverrides): Promise<BigNumber>;

    getAttrState(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClusterAttrIdList(
      clusterId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClusterAttrList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      stateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateClusterAttrList(
      caller: string,
      clusterId: BigNumberish,
      token: string,
      attrList: {
        attrId: BigNumberish;
        name: string;
        symbol: string;
        uri: string;
        level: BigNumberish;
      }[],
      attrStateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttrState(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClusterAttrIdList(
      clusterId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClusterAttrList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClusterAttrStateList(
      clusterId: BigNumberish,
      token: string,
      attrIdList: BigNumberish[],
      stateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateClusterAttrList(
      caller: string,
      clusterId: BigNumberish,
      token: string,
      attrList: {
        attrId: BigNumberish;
        name: string;
        symbol: string;
        uri: string;
        level: BigNumberish;
      }[],
      attrStateList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
