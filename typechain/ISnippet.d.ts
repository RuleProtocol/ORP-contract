/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISnippetInterface extends ethers.utils.Interface {
  functions: {
    "preInputToken((address,uint32,uint8,uint32,uint32,(uint8,address,uint256,uint256,tuple[])))": FunctionFragment;
    "processExecuteDelayTime((address,uint32,uint8,uint8,uint32))": FunctionFragment;
    "processInitDelayTime((address,uint32,uint8,uint8,uint8,uint32,uint32,uint32,uint32,tuple[]))": FunctionFragment;
    "processInputToken((address,uint32,uint8,uint32,uint32,(uint8,address,uint256,uint256,tuple[])))": FunctionFragment;
    "processInputTokenSlotDelayTime((address,uint32,uint8,uint32,uint256,uint8,uint8,address))": FunctionFragment;
    "processOutputToken((address,uint32,uint8,uint32,uint256,uint32,(uint8,address,uint256,uint256,tuple[])))": FunctionFragment;
    "processOutputTokenSlotDelayTime((address,uint32,uint8,uint32,uint256,uint8,uint8,address))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "preInputToken",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processExecuteDelayTime",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        taskId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processInitDelayTime",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        ruleDurationType: BigNumberish;
        ruleDelayTimestamp: BigNumberish;
        ruleDelayBlockNumber: BigNumberish;
        delayTimestamp: BigNumberish;
        delayBlockNumber: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processInputToken",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processInputTokenSlotDelayTime",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processOutputToken",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        outTokenSlotIndex: BigNumberish;
        outToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processOutputTokenSlotDelayTime",
    values: [
      {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "preInputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processExecuteDelayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInitDelayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInputTokenSlotDelayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processOutputTokenSlotDelayTime",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISnippet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISnippetInterface;

  functions: {
    preInputToken(
      preInputToken: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processExecuteDelayTime(
      executeDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        taskId: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processInitDelayTime(
      initDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        ruleDurationType: BigNumberish;
        ruleDelayTimestamp: BigNumberish;
        ruleDelayBlockNumber: BigNumberish;
        delayTimestamp: BigNumberish;
        delayBlockNumber: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processInputToken(
      inputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processInputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processOutputToken(
      outputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        outTokenSlotIndex: BigNumberish;
        outToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processOutputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  preInputToken(
    preInputToken: {
      caller: string;
      clusterId: BigNumberish;
      inBranch: BigNumberish;
      taskId: BigNumberish;
      inTokenSlotIndex: BigNumberish;
      inToken: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processExecuteDelayTime(
    executeDelay: {
      caller: string;
      clusterId: BigNumberish;
      inBranch: BigNumberish;
      inRound: BigNumberish;
      taskId: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processInitDelayTime(
    initDelay: {
      caller: string;
      clusterId: BigNumberish;
      inBranch: BigNumberish;
      inRound: BigNumberish;
      ruleDurationType: BigNumberish;
      ruleDelayTimestamp: BigNumberish;
      ruleDelayBlockNumber: BigNumberish;
      delayTimestamp: BigNumberish;
      delayBlockNumber: BigNumberish;
      inTokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
      }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processInputToken(
    inputToken: {
      caller: string;
      clusterId: BigNumberish;
      outBranch: BigNumberish;
      taskId: BigNumberish;
      inTokenSlotIndex: BigNumberish;
      inToken: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processInputTokenSlotDelayTime(
    tokenSlotDelay: {
      caller: string;
      clusterId: BigNumberish;
      outBranch: BigNumberish;
      taskId: BigNumberish;
      random: BigNumberish;
      tokenSlotIndex: BigNumberish;
      erc: BigNumberish;
      token: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processOutputToken(
    outputToken: {
      caller: string;
      clusterId: BigNumberish;
      outBranch: BigNumberish;
      taskId: BigNumberish;
      random: BigNumberish;
      outTokenSlotIndex: BigNumberish;
      outToken: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processOutputTokenSlotDelayTime(
    tokenSlotDelay: {
      caller: string;
      clusterId: BigNumberish;
      outBranch: BigNumberish;
      taskId: BigNumberish;
      random: BigNumberish;
      tokenSlotIndex: BigNumberish;
      erc: BigNumberish;
      token: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    preInputToken(
      preInputToken: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        ([number, number, number, number, string, number, number, string] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[]
      ] & {
        erc: number;
        token: string;
        tokenId: BigNumber;
        amount: BigNumber;
        attributeOptList: ([
          number,
          number,
          number,
          number,
          string,
          number,
          number,
          string
        ] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[];
      }
    >;

    processExecuteDelayTime(
      executeDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        taskId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<number>;

    processInitDelayTime(
      initDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        ruleDurationType: BigNumberish;
        ruleDelayTimestamp: BigNumberish;
        ruleDelayBlockNumber: BigNumberish;
        delayTimestamp: BigNumberish;
        delayBlockNumber: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<number>;

    processInputToken(
      inputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        ([number, number, number, number, string, number, number, string] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[]
      ] & {
        erc: number;
        token: string;
        tokenId: BigNumber;
        amount: BigNumber;
        attributeOptList: ([
          number,
          number,
          number,
          number,
          string,
          number,
          number,
          string
        ] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[];
      }
    >;

    processInputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: CallOverrides
    ): Promise<number>;

    processOutputToken(
      outputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        outTokenSlotIndex: BigNumberish;
        outToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        ([number, number, number, number, string, number, number, string] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[]
      ] & {
        erc: number;
        token: string;
        tokenId: BigNumber;
        amount: BigNumber;
        attributeOptList: ([
          number,
          number,
          number,
          number,
          string,
          number,
          number,
          string
        ] & {
          attrId: number;
          attrOpt: number;
          attrType: number;
          attrAmount: number;
          attrText: string;
          parentAttrId: number;
          attrState: number;
          attrFormula: string;
        })[];
      }
    >;

    processOutputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    preInputToken(
      preInputToken: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processExecuteDelayTime(
      executeDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        taskId: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processInitDelayTime(
      initDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        ruleDurationType: BigNumberish;
        ruleDelayTimestamp: BigNumberish;
        ruleDelayBlockNumber: BigNumberish;
        delayTimestamp: BigNumberish;
        delayBlockNumber: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processInputToken(
      inputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processInputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processOutputToken(
      outputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        outTokenSlotIndex: BigNumberish;
        outToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processOutputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    preInputToken(
      preInputToken: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processExecuteDelayTime(
      executeDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        taskId: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processInitDelayTime(
      initDelay: {
        caller: string;
        clusterId: BigNumberish;
        inBranch: BigNumberish;
        inRound: BigNumberish;
        ruleDurationType: BigNumberish;
        ruleDelayTimestamp: BigNumberish;
        ruleDelayBlockNumber: BigNumberish;
        delayTimestamp: BigNumberish;
        delayBlockNumber: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processInputToken(
      inputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        inTokenSlotIndex: BigNumberish;
        inToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processInputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processOutputToken(
      outputToken: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        outTokenSlotIndex: BigNumberish;
        outToken: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processOutputTokenSlotDelayTime(
      tokenSlotDelay: {
        caller: string;
        clusterId: BigNumberish;
        outBranch: BigNumberish;
        taskId: BigNumberish;
        random: BigNumberish;
        tokenSlotIndex: BigNumberish;
        erc: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
