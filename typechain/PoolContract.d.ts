/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolContractInterface extends ethers.utils.Interface {
  functions: {
    "cname()": FunctionFragment;
    "deployer(address)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "regDeployer(address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployer", values: [string]): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "regDeployer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "EventDeployer(address,address,uint256,address)": EventFragment;
    "EventDeployerExist(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventDeployer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventDeployerExist"): EventFragment;
}

export type EventDeployerEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    contractAddress: string;
    deployer: string;
    deployerNonce: BigNumber;
    caller: string;
  }
>;

export type EventDeployerExistEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    contractAddress: string;
    deployer: string;
    deployerNonce: BigNumber;
    caller: string;
  }
>;

export class PoolContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolContractInterface;

  functions: {
    cname(overrides?: CallOverrides): Promise<[string]>;

    deployer(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    regDeployer(
      _deployer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cname(overrides?: CallOverrides): Promise<string>;

  deployer(arg0: string, overrides?: CallOverrides): Promise<string>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  regDeployer(
    _deployer: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cname(overrides?: CallOverrides): Promise<string>;

    deployer(arg0: string, overrides?: CallOverrides): Promise<string>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    regDeployer(
      _deployer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EventDeployer(address,address,uint256,address)"(
      contractAddress?: string | null,
      deployer?: string | null,
      deployerNonce?: null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        contractAddress: string;
        deployer: string;
        deployerNonce: BigNumber;
        caller: string;
      }
    >;

    EventDeployer(
      contractAddress?: string | null,
      deployer?: string | null,
      deployerNonce?: null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        contractAddress: string;
        deployer: string;
        deployerNonce: BigNumber;
        caller: string;
      }
    >;

    "EventDeployerExist(address,address,uint256,address)"(
      contractAddress?: string | null,
      deployer?: string | null,
      deployerNonce?: null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        contractAddress: string;
        deployer: string;
        deployerNonce: BigNumber;
        caller: string;
      }
    >;

    EventDeployerExist(
      contractAddress?: string | null,
      deployer?: string | null,
      deployerNonce?: null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        contractAddress: string;
        deployer: string;
        deployerNonce: BigNumber;
        caller: string;
      }
    >;
  };

  estimateGas: {
    cname(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    regDeployer(
      _deployer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regDeployer(
      _deployer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
