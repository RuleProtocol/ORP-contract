/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolTokenInterface extends ethers.utils.Interface {
  functions: {
    "CoinTransfer(uint16,address,uint256)": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ERC1155ApproveForAll(address,address,bool)": FunctionFragment;
    "ERC1155Burn(address,uint16,address,uint256,uint256)": FunctionFragment;
    "ERC1155BurnBatch(address,uint16,address,uint256[],uint256[])": FunctionFragment;
    "ERC1155Mint(address,uint16,address,uint256,uint256,bytes)": FunctionFragment;
    "ERC1155MintBatch(address,uint16[],address,uint256[],uint256[],bytes)": FunctionFragment;
    "ERC1155SafeBatchTransferFrom(address,uint16[],address,uint256[],uint256[],bytes)": FunctionFragment;
    "ERC1155SafeTransferFrom(address,uint16,address,uint256,uint256,bytes)": FunctionFragment;
    "ERC20Approve(address,address,uint256)": FunctionFragment;
    "ERC20Burn(address,uint16,uint256)": FunctionFragment;
    "ERC20Mint(address,uint16,address,uint256)": FunctionFragment;
    "ERC20Transfer(address,uint16,address,uint256)": FunctionFragment;
    "ERC721Approve(address,address,uint256)": FunctionFragment;
    "ERC721ApproveForAll(address,address,bool)": FunctionFragment;
    "ERC721Burn(address,uint16,uint256)": FunctionFragment;
    "ERC721BurnBatch(address,uint16,uint256[])": FunctionFragment;
    "ERC721Claim(address,uint16,uint256,address)": FunctionFragment;
    "ERC721Mint(address,uint16,address)": FunctionFragment;
    "ERC721MintBatch(address,uint16,address,uint256)": FunctionFragment;
    "ERC721SafeTransferFrom(address,uint16,address,uint256,bytes)": FunctionFragment;
    "ERC721Transfer(address,uint16,address,uint256)": FunctionFragment;
    "addTokens((uint8,address,string),bool)": FunctionFragment;
    "allTokens()": FunctionFragment;
    "allocate((address,uint256,uint16,uint8,uint8,uint256,tuple[],string,string))": FunctionFragment;
    "cname()": FunctionFragment;
    "functionCall(address,uint256,bytes)": FunctionFragment;
    "getAllocation(address,uint256,uint8)": FunctionFragment;
    "getIdAllocation(address,uint8)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "idAllocate((address,uint256,uint16,uint8,uint8,uint256,tuple[],string,string))": FunctionFragment;
    "initialize(bytes32[],address,string,string)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "poolTokenAllocation()": FunctionFragment;
    "recordInput(address,uint16,uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tryAddCap(address,uint8,uint256,uint256)": FunctionFragment;
    "tryBurn(address,uint8,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CoinTransfer",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155ApproveForAll",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155Burn",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155BurnBatch",
    values: [string, BigNumberish, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155Mint",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155MintBatch",
    values: [
      string,
      BigNumberish[],
      string,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155SafeBatchTransferFrom",
    values: [
      string,
      BigNumberish[],
      string,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155SafeTransferFrom",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20Approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20Burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20Mint",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20Transfer",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721Approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721ApproveForAll",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721Burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721BurnBatch",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721Claim",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721Mint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721MintBatch",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721SafeTransferFrom",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721Transfer",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokens",
    values: [{ erc: BigNumberish; token: string; logo: string }, boolean]
  ): string;
  encodeFunctionData(functionFragment: "allTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [
      {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "functionCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdAllocation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "idAllocate",
    values: [
      {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike[], string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolTokenAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordInput",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tryAddCap",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBurn",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CoinTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155ApproveForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155Burn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155BurnBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155Mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155MintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155SafeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155SafeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC20Burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ERC20Mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721ApproveForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC721Burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC721BurnBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721Claim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC721Mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC721MintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721SafeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "functionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idAllocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryAddCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AddCap(address,uint256,uint16,uint256,uint256)": EventFragment;
    "AddCapFailed(address,uint256,uint16,uint256,uint256)": EventFragment;
    "Approval(address,uint256,address,address,uint256,uint256)": EventFragment;
    "ApproveForAll(address,uint256,address,address,bool)": EventFragment;
    "Burn(address,uint256,uint16,address,uint256,uint256)": EventFragment;
    "BurnBatch(address,uint256,uint16,address,uint256[],uint256[])": EventFragment;
    "BurnFailed(address,uint256,uint16,uint256,uint256)": EventFragment;
    "Claim(address,uint256,uint16,address,uint256,uint256)": EventFragment;
    "FunctionCall(address,address,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Mint(address,uint256,uint16,address,uint256,uint256)": EventFragment;
    "MintBatch(address,uint256,uint16[],address,uint256[],uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "Receive(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,uint256,uint16,address,address,uint256,uint256)": EventFragment;
    "TransferBatch(address,uint256,uint16[],address,address,uint256[],uint256[])": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddCapFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AddCapEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type AddCapFailedEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type ApprovalEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    owner: string;
    spender: string;
    tokenId: BigNumber;
    amount: BigNumber;
  }
>;

export type ApproveForAllEvent = TypedEvent<
  [string, BigNumber, string, string, boolean] & {
    token: string;
    erc: BigNumber;
    owner: string;
    spender: string;
    approved: boolean;
  }
>;

export type BurnEvent = TypedEvent<
  [string, BigNumber, number, string, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    account: string;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type BurnBatchEvent = TypedEvent<
  [string, BigNumber, number, string, BigNumber[], BigNumber[]] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    account: string;
    ids: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type BurnFailedEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, number, string, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    to: string;
    tokenId: BigNumber;
    value: BigNumber;
  }
>;

export type FunctionCallEvent = TypedEvent<
  [string, string, string] & { caller: string; target: string; data: string }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MintEvent = TypedEvent<
  [string, BigNumber, number, string, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    to: string;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type MintBatchEvent = TypedEvent<
  [string, BigNumber, number[], string, BigNumber[], BigNumber[]] & {
    token: string;
    erc: BigNumber;
    allocationIds: number[];
    to: string;
    ids: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ReceiveEvent = TypedEvent<
  [string, BigNumber] & { from: string; value: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TransferEvent = TypedEvent<
  [string, BigNumber, number, string, string, BigNumber, BigNumber] & {
    token: string;
    erc: BigNumber;
    allocationId: number;
    from: string;
    to: string;
    tokenId: BigNumber;
    value: BigNumber;
  }
>;

export type TransferBatchEvent = TypedEvent<
  [string, BigNumber, number[], string, string, BigNumber[], BigNumber[]] & {
    token: string;
    erc: BigNumber;
    allocationIds: number[];
    from: string;
    to: string;
    ids: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class PoolToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolTokenInterface;

  functions: {
    CoinTransfer(
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ERC1155ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155Burn(
      token: string,
      allocationId: BigNumberish,
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155BurnBatch(
      token: string,
      allocationId: BigNumberish,
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155MintBatch(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155SafeBatchTransferFrom(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC1155SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC20Approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC20Burn(
      token: string,
      allocationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC20Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC20Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721Approve(
      token: string,
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721Burn(
      token: string,
      allocationId: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721BurnBatch(
      token: string,
      allocationId: BigNumberish,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721Claim(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721MintBatch(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ERC721Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, string] & {
          erc: number;
          token: string;
          logo: string;
        })[]
      ] & {
        tokenInfos: ([number, string, string] & {
          erc: number;
          token: string;
          logo: string;
        })[];
      }
    >;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cname(overrides?: CallOverrides): Promise<[string]>;

    functionCall(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          id: number;
          typ: number;
          name: string;
          description: string;
          balance: BigNumber;
          initialSupply: BigNumber;
          increasedSupply: BigNumber;
          burned: BigNumber;
          released: BigNumber;
        })[]
      ]
    >;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          number,
          string,
          string,
          BigNumber[],
          ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
          ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
          BigNumber[],
          BigNumber[]
        ] & {
          id: BigNumber;
          typ: number;
          name: string;
          description: string;
          ids: BigNumber[];
          initialIds: ([BigNumber, BigNumber] & {
            id: BigNumber;
            amount: BigNumber;
          })[];
          increasedIds: ([BigNumber, BigNumber] & {
            id: BigNumber;
            amount: BigNumber;
          })[];
          burnedIds: BigNumber[];
          releasedIds: BigNumber[];
        })[]
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      roles: BytesLike[],
      _allocation: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolTokenAllocation(overrides?: CallOverrides): Promise<[string]>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tryAddCap(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryBurn(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CoinTransfer(
    allocationId: BigNumberish,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ERC1155ApproveForAll(
    token: string,
    spender: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155Burn(
    token: string,
    allocationId: BigNumberish,
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155BurnBatch(
    token: string,
    allocationId: BigNumberish,
    account: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155Mint(
    token: string,
    allocationId: BigNumberish,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155MintBatch(
    token: string,
    allocationIds: BigNumberish[],
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155SafeBatchTransferFrom(
    token: string,
    allocationIds: BigNumberish[],
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC1155SafeTransferFrom(
    token: string,
    allocationId: BigNumberish,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC20Approve(
    token: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC20Burn(
    token: string,
    allocationId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC20Mint(
    token: string,
    allocationId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC20Transfer(
    token: string,
    allocationId: BigNumberish,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721Approve(
    token: string,
    spender: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721ApproveForAll(
    token: string,
    spender: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721Burn(
    token: string,
    allocationId: BigNumberish,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721BurnBatch(
    token: string,
    allocationId: BigNumberish,
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721Claim(
    token: string,
    allocationId: BigNumberish,
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721Mint(
    token: string,
    allocationId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721MintBatch(
    token: string,
    allocationId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721SafeTransferFrom(
    token: string,
    allocationId: BigNumberish,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ERC721Transfer(
    token: string,
    allocationId: BigNumberish,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokens(
    tokenInfo: { erc: BigNumberish; token: string; logo: string },
    add: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allTokens(
    overrides?: CallOverrides
  ): Promise<
    ([number, string, string] & { erc: number; token: string; logo: string })[]
  >;

  allocate(
    params: {
      token: string;
      tokenId: BigNumberish;
      allocationId: BigNumberish;
      allocationType: BigNumberish;
      optType: BigNumberish;
      amount: BigNumberish;
      ids: { id: BigNumberish; amount: BigNumberish }[];
      name: string;
      description: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cname(overrides?: CallOverrides): Promise<string>;

  functionCall(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllocation(
    token: string,
    tokenId: BigNumberish,
    allocationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: number;
      typ: number;
      name: string;
      description: string;
      balance: BigNumber;
      initialSupply: BigNumber;
      increasedSupply: BigNumber;
      burned: BigNumber;
      released: BigNumber;
    })[]
  >;

  getIdAllocation(
    token: string,
    allocationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      number,
      string,
      string,
      BigNumber[],
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
      BigNumber[],
      BigNumber[]
    ] & {
      id: BigNumber;
      typ: number;
      name: string;
      description: string;
      ids: BigNumber[];
      initialIds: ([BigNumber, BigNumber] & {
        id: BigNumber;
        amount: BigNumber;
      })[];
      increasedIds: ([BigNumber, BigNumber] & {
        id: BigNumber;
        amount: BigNumber;
      })[];
      burnedIds: BigNumber[];
      releasedIds: BigNumber[];
    })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  idAllocate(
    params: {
      token: string;
      tokenId: BigNumberish;
      allocationId: BigNumberish;
      allocationType: BigNumberish;
      optType: BigNumberish;
      amount: BigNumberish;
      ids: { id: BigNumberish; amount: BigNumberish }[];
      name: string;
      description: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    roles: BytesLike[],
    _allocation: string,
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolTokenAllocation(overrides?: CallOverrides): Promise<string>;

  recordInput(
    token: string,
    allocationId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tryAddCap(
    token: string,
    erc: BigNumberish,
    tokenId: BigNumberish,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryBurn(
    token: string,
    erc: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CoinTransfer(
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ERC1155ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155Burn(
      token: string,
      allocationId: BigNumberish,
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155BurnBatch(
      token: string,
      allocationId: BigNumberish,
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155MintBatch(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155SafeBatchTransferFrom(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC1155SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC20Approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC20Burn(
      token: string,
      allocationId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC20Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC20Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721Approve(
      token: string,
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721Burn(
      token: string,
      allocationId: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721BurnBatch(
      token: string,
      allocationId: BigNumberish,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721Claim(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721MintBatch(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ERC721Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allTokens(
      overrides?: CallOverrides
    ): Promise<
      ([number, string, string] & {
        erc: number;
        token: string;
        logo: string;
      })[]
    >;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cname(overrides?: CallOverrides): Promise<string>;

    functionCall(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        typ: number;
        name: string;
        description: string;
        balance: BigNumber;
        initialSupply: BigNumber;
        increasedSupply: BigNumber;
        burned: BigNumber;
        released: BigNumber;
      })[]
    >;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        number,
        string,
        string,
        BigNumber[],
        ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
        ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
        BigNumber[],
        BigNumber[]
      ] & {
        id: BigNumber;
        typ: number;
        name: string;
        description: string;
        ids: BigNumber[];
        initialIds: ([BigNumber, BigNumber] & {
          id: BigNumber;
          amount: BigNumber;
        })[];
        increasedIds: ([BigNumber, BigNumber] & {
          id: BigNumber;
          amount: BigNumber;
        })[];
        burnedIds: BigNumber[];
        releasedIds: BigNumber[];
      })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      roles: BytesLike[],
      _allocation: string,
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolTokenAllocation(overrides?: CallOverrides): Promise<string>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tryAddCap(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tryBurn(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddCap(address,uint256,uint16,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    AddCap(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "AddCapFailed(address,uint256,uint16,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    AddCapFailed(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "Approval(address,uint256,address,address,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      owner?: string | null,
      spender?: string | null,
      tokenId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        owner: string;
        spender: string;
        tokenId: BigNumber;
        amount: BigNumber;
      }
    >;

    Approval(
      token?: string | null,
      erc?: null,
      owner?: string | null,
      spender?: string | null,
      tokenId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        owner: string;
        spender: string;
        tokenId: BigNumber;
        amount: BigNumber;
      }
    >;

    "ApproveForAll(address,uint256,address,address,bool)"(
      token?: string | null,
      erc?: null,
      owner?: string | null,
      spender?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, boolean],
      {
        token: string;
        erc: BigNumber;
        owner: string;
        spender: string;
        approved: boolean;
      }
    >;

    ApproveForAll(
      token?: string | null,
      erc?: null,
      owner?: string | null,
      spender?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, boolean],
      {
        token: string;
        erc: BigNumber;
        owner: string;
        spender: string;
        approved: boolean;
      }
    >;

    "Burn(address,uint256,uint16,address,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      account?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        account: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    Burn(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      account?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        account: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "BurnBatch(address,uint256,uint16,address,uint256[],uint256[])"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      account?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        account: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    BurnBatch(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      account?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        account: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "BurnFailed(address,uint256,uint16,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    BurnFailed(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "Claim(address,uint256,uint16,address,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      to?: string | null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        to: string;
        tokenId: BigNumber;
        value: BigNumber;
      }
    >;

    Claim(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      to?: string | null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        to: string;
        tokenId: BigNumber;
        value: BigNumber;
      }
    >;

    "FunctionCall(address,address,bytes)"(
      caller?: string | null,
      target?: string | null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { caller: string; target: string; data: string }
    >;

    FunctionCall(
      caller?: string | null,
      target?: string | null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { caller: string; target: string; data: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Mint(address,uint256,uint16,address,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        to: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    Mint(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        to: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "MintBatch(address,uint256,uint16[],address,uint256[],uint256[])"(
      token?: string | null,
      erc?: null,
      allocationIds?: null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number[], string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationIds: number[];
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    MintBatch(
      token?: string | null,
      erc?: null,
      allocationIds?: null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number[], string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationIds: number[];
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Receive(address,uint256)"(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    Receive(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Transfer(address,uint256,uint16,address,address,uint256,uint256)"(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      from?: string | null,
      to?: string | null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        from: string;
        to: string;
        tokenId: BigNumber;
        value: BigNumber;
      }
    >;

    Transfer(
      token?: string | null,
      erc?: null,
      allocationId?: null,
      from?: string | null,
      to?: string | null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string, BigNumber, BigNumber],
      {
        token: string;
        erc: BigNumber;
        allocationId: number;
        from: string;
        to: string;
        tokenId: BigNumber;
        value: BigNumber;
      }
    >;

    "TransferBatch(address,uint256,uint16[],address,address,uint256[],uint256[])"(
      token?: string | null,
      erc?: null,
      allocationIds?: null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number[], string, string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationIds: number[];
        from: string;
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    TransferBatch(
      token?: string | null,
      erc?: null,
      allocationIds?: null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, number[], string, string, BigNumber[], BigNumber[]],
      {
        token: string;
        erc: BigNumber;
        allocationIds: number[];
        from: string;
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    CoinTransfer(
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ERC1155ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155Burn(
      token: string,
      allocationId: BigNumberish,
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155BurnBatch(
      token: string,
      allocationId: BigNumberish,
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155MintBatch(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155SafeBatchTransferFrom(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC1155SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC20Approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC20Burn(
      token: string,
      allocationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC20Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC20Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721Approve(
      token: string,
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721Burn(
      token: string,
      allocationId: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721BurnBatch(
      token: string,
      allocationId: BigNumberish,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721Claim(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721MintBatch(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ERC721Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allTokens(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<BigNumber>;

    functionCall(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      roles: BytesLike[],
      _allocation: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolTokenAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tryAddCap(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryBurn(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CoinTransfer(
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC1155ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155Burn(
      token: string,
      allocationId: BigNumberish,
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155BurnBatch(
      token: string,
      allocationId: BigNumberish,
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155MintBatch(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155SafeBatchTransferFrom(
      token: string,
      allocationIds: BigNumberish[],
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC1155SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC20Approve(
      token: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC20Burn(
      token: string,
      allocationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC20Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC20Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721Approve(
      token: string,
      spender: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721ApproveForAll(
      token: string,
      spender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721Burn(
      token: string,
      allocationId: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721BurnBatch(
      token: string,
      allocationId: BigNumberish,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721Claim(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721Mint(
      token: string,
      allocationId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721MintBatch(
      token: string,
      allocationId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721SafeTransferFrom(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ERC721Transfer(
      token: string,
      allocationId: BigNumberish,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    functionCall(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      roles: BytesLike[],
      _allocation: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTokenAllocation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tryAddCap(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryBurn(
      token: string,
      erc: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
