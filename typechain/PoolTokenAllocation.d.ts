/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolTokenAllocationInterface extends ethers.utils.Interface {
  functions: {
    "addTokens((uint8,address,string),bool)": FunctionFragment;
    "allTokens()": FunctionFragment;
    "allocate((address,uint256,uint16,uint8,uint8,uint256,tuple[],string,string))": FunctionFragment;
    "allocationKey(address,uint256,uint256,uint8)": FunctionFragment;
    "getAllocation(address,uint256,uint8)": FunctionFragment;
    "getIdAllocation(address,uint8)": FunctionFragment;
    "idAllocate((address,uint256,uint16,uint8,uint8,uint256,tuple[],string,string))": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isEqual(string,string)": FunctionFragment;
    "recordInput(address,uint16,uint256,uint256)": FunctionFragment;
    "spendAllocation(address,uint8,uint8,bool,uint16,uint256,uint256)": FunctionFragment;
    "tokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokens",
    values: [{ erc: BigNumberish; token: string; logo: string }, boolean]
  ): string;
  encodeFunctionData(functionFragment: "allTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [
      {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationKey",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdAllocation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idAllocate",
    values: [
      {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isEqual",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordInput",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendAllocation",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;

  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idAllocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export class PoolTokenAllocation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolTokenAllocationInterface;

  functions: {
    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, string] & {
          erc: number;
          token: string;
          logo: string;
        })[]
      ] & {
        tokenInfos: ([number, string, string] & {
          erc: number;
          token: string;
          logo: string;
        })[];
      }
    >;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocationKey(
      token: string,
      tokenId: BigNumberish,
      allocationId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          id: number;
          typ: number;
          name: string;
          description: string;
          balance: BigNumber;
          initialSupply: BigNumber;
          increasedSupply: BigNumber;
          burned: BigNumber;
          released: BigNumber;
        })[]
      ]
    >;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          number,
          string,
          string,
          BigNumber[],
          ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
          ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
          BigNumber[],
          BigNumber[]
        ] & {
          id: BigNumber;
          typ: number;
          name: string;
          description: string;
          ids: BigNumber[];
          initialIds: ([BigNumber, BigNumber] & {
            id: BigNumber;
            amount: BigNumber;
          })[];
          increasedIds: ([BigNumber, BigNumber] & {
            id: BigNumber;
            amount: BigNumber;
          })[];
          burnedIds: BigNumber[];
          releasedIds: BigNumber[];
        })[]
      ]
    >;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEqual(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spendAllocation(
      token: string,
      erc: BigNumberish,
      allocationType: BigNumberish,
      burn: boolean,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & { erc: number; token: string; logo: string }
    >;
  };

  addTokens(
    tokenInfo: { erc: BigNumberish; token: string; logo: string },
    add: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allTokens(
    overrides?: CallOverrides
  ): Promise<
    ([number, string, string] & { erc: number; token: string; logo: string })[]
  >;

  allocate(
    params: {
      token: string;
      tokenId: BigNumberish;
      allocationId: BigNumberish;
      allocationType: BigNumberish;
      optType: BigNumberish;
      amount: BigNumberish;
      ids: { id: BigNumberish; amount: BigNumberish }[];
      name: string;
      description: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocationKey(
    token: string,
    tokenId: BigNumberish,
    allocationId: BigNumberish,
    allocationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllocation(
    token: string,
    tokenId: BigNumberish,
    allocationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: number;
      typ: number;
      name: string;
      description: string;
      balance: BigNumber;
      initialSupply: BigNumber;
      increasedSupply: BigNumber;
      burned: BigNumber;
      released: BigNumber;
    })[]
  >;

  getIdAllocation(
    token: string,
    allocationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      number,
      string,
      string,
      BigNumber[],
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
      BigNumber[],
      BigNumber[]
    ] & {
      id: BigNumber;
      typ: number;
      name: string;
      description: string;
      ids: BigNumber[];
      initialIds: ([BigNumber, BigNumber] & {
        id: BigNumber;
        amount: BigNumber;
      })[];
      increasedIds: ([BigNumber, BigNumber] & {
        id: BigNumber;
        amount: BigNumber;
      })[];
      burnedIds: BigNumber[];
      releasedIds: BigNumber[];
    })[]
  >;

  idAllocate(
    params: {
      token: string;
      tokenId: BigNumberish;
      allocationId: BigNumberish;
      allocationType: BigNumberish;
      optType: BigNumberish;
      amount: BigNumberish;
      ids: { id: BigNumberish; amount: BigNumberish }[];
      name: string;
      description: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEqual(a: string, b: string, overrides?: CallOverrides): Promise<boolean>;

  recordInput(
    token: string,
    allocationId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spendAllocation(
    token: string,
    erc: BigNumberish,
    allocationType: BigNumberish,
    burn: boolean,
    allocationId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & { erc: number; token: string; logo: string }
  >;

  callStatic: {
    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allTokens(
      overrides?: CallOverrides
    ): Promise<
      ([number, string, string] & {
        erc: number;
        token: string;
        logo: string;
      })[]
    >;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    allocationKey(
      token: string,
      tokenId: BigNumberish,
      allocationId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        typ: number;
        name: string;
        description: string;
        balance: BigNumber;
        initialSupply: BigNumber;
        increasedSupply: BigNumber;
        burned: BigNumber;
        released: BigNumber;
      })[]
    >;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        number,
        string,
        string,
        BigNumber[],
        ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
        ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[],
        BigNumber[],
        BigNumber[]
      ] & {
        id: BigNumber;
        typ: number;
        name: string;
        description: string;
        ids: BigNumber[];
        initialIds: ([BigNumber, BigNumber] & {
          id: BigNumber;
          amount: BigNumber;
        })[];
        increasedIds: ([BigNumber, BigNumber] & {
          id: BigNumber;
          amount: BigNumber;
        })[];
        burnedIds: BigNumber[];
        releasedIds: BigNumber[];
      })[]
    >;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_pool: string, overrides?: CallOverrides): Promise<void>;

    isEqual(a: string, b: string, overrides?: CallOverrides): Promise<boolean>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spendAllocation(
      token: string,
      erc: BigNumberish,
      allocationType: BigNumberish,
      burn: boolean,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & { erc: number; token: string; logo: string }
    >;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allTokens(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocationKey(
      token: string,
      tokenId: BigNumberish,
      allocationId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEqual(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spendAllocation(
      token: string,
      erc: BigNumberish,
      allocationType: BigNumberish,
      burn: boolean,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokens(
      tokenInfo: { erc: BigNumberish; token: string; logo: string },
      add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocationKey(
      token: string,
      tokenId: BigNumberish,
      allocationId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocation(
      token: string,
      tokenId: BigNumberish,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdAllocation(
      token: string,
      allocationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idAllocate(
      params: {
        token: string;
        tokenId: BigNumberish;
        allocationId: BigNumberish;
        allocationType: BigNumberish;
        optType: BigNumberish;
        amount: BigNumberish;
        ids: { id: BigNumberish; amount: BigNumberish }[];
        name: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEqual(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordInput(
      token: string,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spendAllocation(
      token: string,
      erc: BigNumberish,
      allocationType: BigNumberish,
      burn: boolean,
      allocationId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
