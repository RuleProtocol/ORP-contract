/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RandomGeneratorInterface extends ethers.utils.Interface {
  functions: {
    "blockHashTask(bytes32)": FunctionFragment;
    "clearRandom(address,uint32,uint16,uint16,address,uint32,address)": FunctionFragment;
    "cname()": FunctionFragment;
    "getRandomState(address,address,uint32,uint16,uint16,address,uint32,address)": FunctionFragment;
    "getTaskRandom(bytes32)": FunctionFragment;
    "makeRandom(bytes,address,uint32,uint16,uint16,address,uint32,address)": FunctionFragment;
    "makeRandomBlock(address,uint32,uint16,uint16,address,uint32,address)": FunctionFragment;
    "makeRandomPast(bytes,address,uint32,uint16,uint16,address,uint32,address)": FunctionFragment;
    "taskRandom(bytes32)": FunctionFragment;
    "updateRandomArgs(uint32,uint16,uint16,uint8)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockHashTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearRandom",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRandomState",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskRandom",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRandom",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRandomBlock",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeRandomPast",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskRandom",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRandomArgs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "blockHashTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeRandomBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRandomPast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRandomArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Random(address,uint32,uint16,uint16,address,uint32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Random"): EventFragment;
}

export type RandomEvent = TypedEvent<
  [string, number, number, number, string, number, string, BigNumber] & {
    clusterArea: string;
    clusterId: number;
    ruleSlotIndexInput: number;
    ruleSlotIndexOutput: number;
    stateCounter: string;
    taskId: number;
    caller: string;
    random: BigNumber;
  }
>;

export class RandomGenerator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RandomGeneratorInterface;

  functions: {
    blockHashTask(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearRandom(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cname(overrides?: CallOverrides): Promise<[string]>;

    getRandomState(
      handler: string,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          handler: string;
          clusterArea: string;
          stateCounter: string;
          caller: string;
          clusterId: number;
          ruleSlotIndexInput: number;
          ruleSlotIndexOutput: number;
          taskId: number;
          blockTimestamp: number;
          blockNumber: number;
          stdTrialMaxCount: number;
          trialCount: number;
          futureBlockNumber: number;
          futureBlockHash: string;
          futureBlockHashInt: BigNumber;
        }
      ]
    >;

    getTaskRandom(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeRandom(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeRandomBlock(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeRandomPast(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskRandom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateRandomArgs(
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      trialMaxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  blockHashTask(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  clearRandom(
    clusterArea: string,
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    stateCounter: string,
    taskId: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cname(overrides?: CallOverrides): Promise<string>;

  getRandomState(
    handler: string,
    clusterArea: string,
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    stateCounter: string,
    taskId: BigNumberish,
    caller: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      string,
      BigNumber
    ] & {
      handler: string;
      clusterArea: string;
      stateCounter: string;
      caller: string;
      clusterId: number;
      ruleSlotIndexInput: number;
      ruleSlotIndexOutput: number;
      taskId: number;
      blockTimestamp: number;
      blockNumber: number;
      stdTrialMaxCount: number;
      trialCount: number;
      futureBlockNumber: number;
      futureBlockHash: string;
      futureBlockHashInt: BigNumber;
    }
  >;

  getTaskRandom(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeRandom(
    data: BytesLike,
    clusterArea: string,
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    stateCounter: string,
    taskId: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeRandomBlock(
    clusterArea: string,
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    stateCounter: string,
    taskId: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeRandomPast(
    data: BytesLike,
    clusterArea: string,
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    stateCounter: string,
    taskId: BigNumberish,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskRandom(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  updateRandomArgs(
    clusterId: BigNumberish,
    ruleSlotIndexInput: BigNumberish,
    ruleSlotIndexOutput: BigNumberish,
    trialMaxCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    blockHashTask(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearRandom(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cname(overrides?: CallOverrides): Promise<string>;

    getRandomState(
      handler: string,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string,
        BigNumber
      ] & {
        handler: string;
        clusterArea: string;
        stateCounter: string;
        caller: string;
        clusterId: number;
        ruleSlotIndexInput: number;
        ruleSlotIndexOutput: number;
        taskId: number;
        blockTimestamp: number;
        blockNumber: number;
        stdTrialMaxCount: number;
        trialCount: number;
        futureBlockNumber: number;
        futureBlockHash: string;
        futureBlockHashInt: BigNumber;
      }
    >;

    getTaskRandom(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeRandom(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeRandomBlock(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeRandomPast(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskRandom(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    updateRandomArgs(
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      trialMaxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Random(address,uint32,uint16,uint16,address,uint32,address,uint256)"(
      clusterArea?: string | null,
      clusterId?: BigNumberish | null,
      ruleSlotIndexInput?: null,
      ruleSlotIndexOutput?: null,
      stateCounter?: null,
      taskId?: null,
      caller?: null,
      random?: BigNumberish | null
    ): TypedEventFilter<
      [string, number, number, number, string, number, string, BigNumber],
      {
        clusterArea: string;
        clusterId: number;
        ruleSlotIndexInput: number;
        ruleSlotIndexOutput: number;
        stateCounter: string;
        taskId: number;
        caller: string;
        random: BigNumber;
      }
    >;

    Random(
      clusterArea?: string | null,
      clusterId?: BigNumberish | null,
      ruleSlotIndexInput?: null,
      ruleSlotIndexOutput?: null,
      stateCounter?: null,
      taskId?: null,
      caller?: null,
      random?: BigNumberish | null
    ): TypedEventFilter<
      [string, number, number, number, string, number, string, BigNumber],
      {
        clusterArea: string;
        clusterId: number;
        ruleSlotIndexInput: number;
        ruleSlotIndexOutput: number;
        stateCounter: string;
        taskId: number;
        caller: string;
        random: BigNumber;
      }
    >;
  };

  estimateGas: {
    blockHashTask(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearRandom(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomState(
      handler: string,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskRandom(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeRandom(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeRandomBlock(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeRandomPast(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskRandom(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    updateRandomArgs(
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      trialMaxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blockHashTask(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearRandom(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomState(
      handler: string,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskRandom(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeRandom(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeRandomBlock(
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeRandomPast(
      data: BytesLike,
      clusterArea: string,
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      stateCounter: string,
      taskId: BigNumberish,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskRandom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRandomArgs(
      clusterId: BigNumberish,
      ruleSlotIndexInput: BigNumberish,
      ruleSlotIndexOutput: BigNumberish,
      trialMaxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
