/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IClusterArea, IClusterAreaInterface } from "../IClusterArea";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "regType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "ruleSlotIndex1",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "ruleSlotIndex2",
        type: "uint8",
      },
    ],
    name: "EventCluster",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Receive",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "erc",
                        type: "uint8",
                      },
                      {
                        internalType: "address",
                        name: "token",
                        type: "address",
                      },
                      {
                        internalType: "uint256[]",
                        name: "valueList",
                        type: "uint256[]",
                      },
                    ],
                    internalType: "struct Token.TokenTemplate",
                    name: "tokenTemplate",
                    type: "tuple",
                  },
                  {
                    internalType: "uint8",
                    name: "rule",
                    type: "uint8",
                  },
                  {
                    internalType: "address[]",
                    name: "ioAddressList",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[]",
                    name: "valueList",
                    type: "uint256[]",
                  },
                ],
                internalType: "struct Rule.TokenSlot[]",
                name: "tokenSlotList",
                type: "tuple[]",
              },
              {
                internalType: "uint8",
                name: "branch",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "poolToken",
                type: "address",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "argsList",
                type: "bytes[]",
              },
            ],
            internalType: "struct Rule.GroupSlot[]",
            name: "groupSlotList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "ruleSlotBound",
            type: "uint8[]",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "ruleSlotIndexInput",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "ruleSlotIndexOutput",
                type: "uint16",
              },
              {
                internalType: "uint8",
                name: "state",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "totalCount",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "durationType",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "delayTimestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "delayBlockNumber",
                type: "uint32",
              },
              {
                internalType: "uint64",
                name: "handlerCount",
                type: "uint64",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "handlerArgsList",
                type: "bytes[]",
              },
              {
                internalType: "address",
                name: "snippet",
                type: "address",
              },
            ],
            internalType: "struct Rule.Rule[]",
            name: "ruleList",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "attrId",
                type: "uint32",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "uri",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "level",
                type: "uint8",
              },
            ],
            internalType: "struct Attribute.Attribute[]",
            name: "attrList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "attrStateList",
            type: "uint8[]",
          },
          {
            internalType: "address[]",
            name: "deployerList",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "adminList",
            type: "address[]",
          },
          {
            internalType: "uint32",
            name: "delayTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "delayBlockNumber",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Cluster.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "addRule",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cname",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getAdminList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClusterAttributeArea",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClusterAttributeAreaToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClusterMountingArea",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClusterRuleArea",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClusterRuleAreaHandler",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getClusterState",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentClusterId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getDelayBlockNumber",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getDelayTimestamp",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getDeployerList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
    ],
    name: "getDescription",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEngine",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexInput",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexOutput",
        type: "uint16",
      },
    ],
    name: "getPostGroupSlotForEngine",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "postHandlerList",
            type: "address[]",
          },
        ],
        internalType: "struct IClusterArea.PostForEngine",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexInput",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexOutput",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "branch",
        type: "uint8",
      },
    ],
    name: "getPreGroupSlotForEngine",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "foundGroupSlot",
            type: "bool",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "erc",
                        type: "uint8",
                      },
                      {
                        internalType: "address",
                        name: "token",
                        type: "address",
                      },
                      {
                        internalType: "uint256[]",
                        name: "valueList",
                        type: "uint256[]",
                      },
                    ],
                    internalType: "struct Token.TokenTemplate",
                    name: "tokenTemplate",
                    type: "tuple",
                  },
                  {
                    internalType: "uint8",
                    name: "rule",
                    type: "uint8",
                  },
                  {
                    internalType: "address[]",
                    name: "ioAddressList",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[]",
                    name: "valueList",
                    type: "uint256[]",
                  },
                ],
                internalType: "struct Rule.TokenSlot[]",
                name: "tokenSlotList",
                type: "tuple[]",
              },
              {
                internalType: "uint8",
                name: "branch",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "poolToken",
                type: "address",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "argsList",
                type: "bytes[]",
              },
            ],
            internalType: "struct Rule.GroupSlot",
            name: "groupSlot",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "snippet",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "preHandlerList",
            type: "address[]",
          },
          {
            internalType: "uint8",
            name: "ruleDurationType",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "ruleDelayTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "ruleDelayBlockNumber",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "delayTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "delayBlockNumber",
            type: "uint32",
          },
        ],
        internalType: "struct IClusterArea.PreForEngine",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexInput",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndexOutput",
        type: "uint16",
      },
    ],
    name: "getProcessGroupSlotForEngine",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "processHandlerList",
            type: "address[]",
          },
        ],
        internalType: "struct IClusterArea.ProcessForEngine",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "haveRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "channel",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "_paused",
        type: "bool",
      },
    ],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "erc",
                        type: "uint8",
                      },
                      {
                        internalType: "address",
                        name: "token",
                        type: "address",
                      },
                      {
                        internalType: "uint256[]",
                        name: "valueList",
                        type: "uint256[]",
                      },
                    ],
                    internalType: "struct Token.TokenTemplate",
                    name: "tokenTemplate",
                    type: "tuple",
                  },
                  {
                    internalType: "uint8",
                    name: "rule",
                    type: "uint8",
                  },
                  {
                    internalType: "address[]",
                    name: "ioAddressList",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[]",
                    name: "valueList",
                    type: "uint256[]",
                  },
                ],
                internalType: "struct Rule.TokenSlot[]",
                name: "tokenSlotList",
                type: "tuple[]",
              },
              {
                internalType: "uint8",
                name: "branch",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "poolToken",
                type: "address",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "argsList",
                type: "bytes[]",
              },
            ],
            internalType: "struct Rule.GroupSlot[]",
            name: "groupSlotList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "ruleSlotBound",
            type: "uint8[]",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "ruleSlotIndexInput",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "ruleSlotIndexOutput",
                type: "uint16",
              },
              {
                internalType: "uint8",
                name: "state",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "totalCount",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "durationType",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "delayTimestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "delayBlockNumber",
                type: "uint32",
              },
              {
                internalType: "uint64",
                name: "handlerCount",
                type: "uint64",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "handlerArgsList",
                type: "bytes[]",
              },
              {
                internalType: "address",
                name: "snippet",
                type: "address",
              },
            ],
            internalType: "struct Rule.Rule[]",
            name: "ruleList",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "attrId",
                type: "uint32",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "uri",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "level",
                type: "uint8",
              },
            ],
            internalType: "struct Attribute.Attribute[]",
            name: "attrList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "attrStateList",
            type: "uint8[]",
          },
          {
            internalType: "address[]",
            name: "deployerList",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "adminList",
            type: "address[]",
          },
          {
            internalType: "uint32",
            name: "delayTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "delayBlockNumber",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Cluster.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "regCluster",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "erc",
                        type: "uint8",
                      },
                      {
                        internalType: "address",
                        name: "token",
                        type: "address",
                      },
                      {
                        internalType: "uint256[]",
                        name: "valueList",
                        type: "uint256[]",
                      },
                    ],
                    internalType: "struct Token.TokenTemplate",
                    name: "tokenTemplate",
                    type: "tuple",
                  },
                  {
                    internalType: "uint8",
                    name: "rule",
                    type: "uint8",
                  },
                  {
                    internalType: "address[]",
                    name: "ioAddressList",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[]",
                    name: "valueList",
                    type: "uint256[]",
                  },
                ],
                internalType: "struct Rule.TokenSlot[]",
                name: "tokenSlotList",
                type: "tuple[]",
              },
              {
                internalType: "uint8",
                name: "branch",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "poolToken",
                type: "address",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "argsList",
                type: "bytes[]",
              },
            ],
            internalType: "struct Rule.GroupSlot[]",
            name: "groupSlotList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "ruleSlotBound",
            type: "uint8[]",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "ruleSlotIndexInput",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "ruleSlotIndexOutput",
                type: "uint16",
              },
              {
                internalType: "uint8",
                name: "state",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "totalCount",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "durationType",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "delayTimestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "delayBlockNumber",
                type: "uint32",
              },
              {
                internalType: "uint64",
                name: "handlerCount",
                type: "uint64",
              },
              {
                internalType: "address[]",
                name: "handlerList",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "handlerArgsList",
                type: "bytes[]",
              },
              {
                internalType: "address",
                name: "snippet",
                type: "address",
              },
            ],
            internalType: "struct Rule.Rule[]",
            name: "ruleList",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "attrId",
                type: "uint32",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "uri",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "level",
                type: "uint8",
              },
            ],
            internalType: "struct Attribute.Attribute[]",
            name: "attrList",
            type: "tuple[]",
          },
          {
            internalType: "uint8[]",
            name: "attrStateList",
            type: "uint8[]",
          },
          {
            internalType: "address[]",
            name: "deployerList",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "adminList",
            type: "address[]",
          },
          {
            internalType: "uint32",
            name: "delayTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "delayBlockNumber",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Cluster.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "regRule",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "state",
        type: "uint8",
      },
    ],
    name: "setClusterState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "clusterId",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "ruleSlotIndex",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "branch",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "tokenSlotIndex",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "idIndex",
            type: "uint256",
          },
        ],
        internalType: "struct Token.TokenHandler",
        name: "tokenHandler",
        type: "tuple",
      },
    ],
    name: "updateGroupSlotTokenHandler",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class IClusterArea__factory {
  static readonly abi = _abi;
  static createInterface(): IClusterAreaInterface {
    return new utils.Interface(_abi) as IClusterAreaInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IClusterArea {
    return new Contract(address, _abi, signerOrProvider) as IClusterArea;
  }
}
