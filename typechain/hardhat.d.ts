/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Supply__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "DoubleEndedQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleEndedQueue__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "GovernorCheck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCheck__factory>;
    getContractFactory(
      name: "GovernorContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorContract__factory>;
    getContractFactory(
      name: "GovernorCountingSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCountingSimple__factory>;
    getContractFactory(
      name: "GovernorSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSettings__factory>;
    getContractFactory(
      name: "GovernorTimelockControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: "GovernorVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "IGovernorCheck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorCheck__factory>;
    getContractFactory(
      name: "IGovernorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: "IGovHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovHandler__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "TimeLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeLock__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "ClusterArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterArea__factory>;
    getContractFactory(
      name: "ClusterAttributeArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterAttributeArea__factory>;
    getContractFactory(
      name: "ClusterAttributeAreaToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterAttributeAreaToken__factory>;
    getContractFactory(
      name: "ClusterHandlerArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterHandlerArea__factory>;
    getContractFactory(
      name: "ClusterMountingArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterMountingArea__factory>;
    getContractFactory(
      name: "ClusterRuleArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterRuleArea__factory>;
    getContractFactory(
      name: "ClusterRuleAreaHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClusterRuleAreaHandler__factory>;
    getContractFactory(
      name: "GovHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovHandler__factory>;
    getContractFactory(
      name: "IClusterRuleArea",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClusterRuleArea__factory>;
    getContractFactory(
      name: "IERCMintBurnClaimRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCMintBurnClaimRole__factory>;
    getContractFactory(
      name: "IHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHandler__factory>;
    getContractFactory(
      name: "IPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolToken__factory>;
    getContractFactory(
      name: "IVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersion__factory>;
    getContractFactory(
      name: "PoolContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolContract__factory>;
    getContractFactory(
      name: "PoolGas",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolGas__factory>;
    getContractFactory(
      name: "PoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolToken__factory>;
    getContractFactory(
      name: "PoolTokenAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolTokenAllocation__factory>;
    getContractFactory(
      name: "ProxyIntake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyIntake__factory>;
    getContractFactory(
      name: "ProxyIntakeAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyIntakeAdmin__factory>;
    getContractFactory(
      name: "DecodeHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecodeHelper__factory>;
    getContractFactory(
      name: "EncodeHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EncodeHelper__factory>;
    getContractFactory(
      name: "ERC1155MinterSupplyCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MinterSupplyCap__factory>;
    getContractFactory(
      name: "ERC20FixedSupplyCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FixedSupplyCap__factory>;
    getContractFactory(
      name: "ERC20MinterPauserBurnerCapVote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MinterPauserBurnerCapVote__factory>;
    getContractFactory(
      name: "ERC721MinterPauserAutoIdCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721MinterPauserAutoIdCap__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transfer__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Supply>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "DoubleEndedQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleEndedQueue>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "GovernorCheck",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCheck>;
    getContractAt(
      name: "GovernorContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorContract>;
    getContractAt(
      name: "GovernorCountingSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCountingSimple>;
    getContractAt(
      name: "GovernorSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSettings>;
    getContractAt(
      name: "GovernorTimelockControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: "GovernorVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "IGovernorCheck",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorCheck>;
    getContractAt(
      name: "IGovernorTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: "IGovHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovHandler>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "TimeLock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeLock>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "ClusterArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterArea>;
    getContractAt(
      name: "ClusterAttributeArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterAttributeArea>;
    getContractAt(
      name: "ClusterAttributeAreaToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterAttributeAreaToken>;
    getContractAt(
      name: "ClusterHandlerArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterHandlerArea>;
    getContractAt(
      name: "ClusterMountingArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterMountingArea>;
    getContractAt(
      name: "ClusterRuleArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterRuleArea>;
    getContractAt(
      name: "ClusterRuleAreaHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClusterRuleAreaHandler>;
    getContractAt(
      name: "GovHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovHandler>;
    getContractAt(
      name: "IClusterRuleArea",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClusterRuleArea>;
    getContractAt(
      name: "IERCMintBurnClaimRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERCMintBurnClaimRole>;
    getContractAt(
      name: "IHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHandler>;
    getContractAt(
      name: "IPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolToken>;
    getContractAt(
      name: "IVersion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersion>;
    getContractAt(
      name: "PoolContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolContract>;
    getContractAt(
      name: "PoolGas",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolGas>;
    getContractAt(
      name: "PoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolToken>;
    getContractAt(
      name: "PoolTokenAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolTokenAllocation>;
    getContractAt(
      name: "ProxyIntake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyIntake>;
    getContractAt(
      name: "ProxyIntakeAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyIntakeAdmin>;
    getContractAt(
      name: "DecodeHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DecodeHelper>;
    getContractAt(
      name: "EncodeHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EncodeHelper>;
    getContractAt(
      name: "ERC1155MinterSupplyCap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MinterSupplyCap>;
    getContractAt(
      name: "ERC20FixedSupplyCap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FixedSupplyCap>;
    getContractAt(
      name: "ERC20MinterPauserBurnerCapVote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MinterPauserBurnerCapVote>;
    getContractAt(
      name: "ERC721MinterPauserAutoIdCap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721MinterPauserAutoIdCap>;
    getContractAt(
      name: "ArbSys",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: "Transfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Transfer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
